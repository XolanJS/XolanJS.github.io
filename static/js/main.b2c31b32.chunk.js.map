{"version":3,"sources":["common.js","AppProvider.js","components/Header.js","components/Main.js","App.js","index.js"],"names":["GAME_TYPES","ICON_CHARS","PLAYER_TURNS","getEmptyCells","cells","map","val","idx","filter","item","isMoveLeft","length","getRandom","start","end","Math","floor","random","replace","index","value","slice","minimax","depth","computerType","isMax","score","lines","i","a","b","c","evaluate","lengthCells","best","nextCells","max","min","AppContext","React","createContext","AppProvider","Component","initState","gameType","currentIcon","playerTurn","Array","fill","gameState","position","iconType","isTie","state","this","changeType","type","initNewGame","humanPlay","newGame","initGame","timeout","clearTimeout","setTimeout","randomMove","emptyCells","findRandomMove","computerPlay","setState","applyState","prevState","nextIcon","nextPlayerTurn","checkGameState","makeAIMove","bestMove","bestVal","moveVal","findBestMove","componentDidMount","render","Provider","props","children","GameType","name","Consumer","context","onClick","className","Header","contextType","Cell","icon","isDoneClass","Board","constructor","super","boardRef","createRef","componentDidUpdate","current","classList","add","remove","ref","Main","textInfo","currentIconType","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b2c31b32.chunk.js","sourcesContent":["export const GAME_TYPES = {\n  TWO_PLAYERS: 0,\n  VERSUS_COMPUTER: 1\n}\n\nexport const ICON_TYPES = {\n  O: 0,\n  X: 1\n}\n\nexport const ICON_CHARS = ['O', 'X'];\n\nexport const PLAYER_TURNS = {\n  HUMAN: 0,\n  COMPUTER: 1\n}\n\nconst getEmptyCells = (cells) => {\n  return cells\n    .map((val, idx) => [val, idx])\n    .filter(item => item[0] === null);\n}\n\nconst isMoveLeft = (cells) => {\n  const emptyCells = getEmptyCells(cells);\n  return emptyCells.length > 0;\n}\n\nexport const checkGameState = (cells) => {\n  const lines = [\n    [0, 1, 2], // h.h0\n    [3, 4, 5], // h.h1 \n    [6, 7, 8], // h.h2\n    [0, 3, 6], // v.v0\n    [1, 4, 7], // v.v1\n    [2, 5, 8], // v.v2\n    [0, 4, 8], // d.d0\n    [2, 4, 6]  // d.d1\n  ];\n\n  let position = \"\";\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (cells[a] !== null && cells[a] === cells[b] && cells[a] === cells[c]) {\n      if (i >= 0 && i <= 2) position = `h h${i}`;\n      else if (i >= 3 && i <= 5) position = `v v${i - 3}`;\n      else position = `d${i - 6}`;\n\n      return {\n        position,\n        iconType: cells[a],\n        isTie: null\n      }\n    }\n  }\n\n  return {\n    position: \"\",\n    iconType: null,\n    isTie: isMoveLeft(cells) ? null : true\n  };\n}\n\nexport const getRandom = (start, end) => {\n  return start + Math.floor(Math.random() * (end - start));\n}\n\nexport const replace = (cells, index, value) => {\n  return [...cells.slice(0, index), value, ...cells.slice(index + 1, cells.length)];\n}\n\n/**\n * Random move\n */\nexport const findRandomMove = (cells) => {\n  const emptyCells = getEmptyCells(cells);\n\n  if (emptyCells.length > 0) {\n    const randomNum = getRandom(0, emptyCells.length);\n    const index = emptyCells[randomNum][1];\n\n    return index;\n  }\n\n  return null;\n}\n\n/**\n * Find best move based on Minimax algorithm\n */\nconst evaluate = (cells, computerType) => {\n  const lines = [\n    [0, 1, 2], // h.h0\n    [3, 4, 5], // h.h1 \n    [6, 7, 8], // h.h2\n    [0, 3, 6], // v.v0\n    [1, 4, 7], // v.v1\n    [2, 5, 8], // v.v2\n    [0, 4, 8], // d.d0\n    [2, 4, 6]  // d.d1\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (cells[a] !== null && cells[a] === cells[b] && cells[a] === cells[c]) {\n      if (cells[a] === computerType) return 10;\n      return -10;\n    }\n  }\n\n  return 0;\n}\n\nconst minimax = (cells, depth, computerType, isMax) => {\n  const score = evaluate(cells, computerType);\n\n  // If Maximizer has won the game return his/her evaluated score \n  if (score === 10) return score - depth;\n\n  // If Minimizer has won the game return his/her evaluated score \n  if (score === -10) return score + depth;\n\n  // If there are no more moves and no winner then it is a tie \n  if (!isMoveLeft(cells)) return 0;\n\n  const lengthCells = cells.length;\n  let best;\n\n  // If this maximizer's move \n  if (isMax) {\n    best = -1000;\n\n    for (let i = 0; i < lengthCells; i++) {\n      const cell = cells[i];\n\n      if (cell === null) {\n        // Make a move\n        const nextCells = replace(cells, i, computerType);\n\n        // Call minimax recursively and choose the maximum value\n        best = Math.max(best, minimax(nextCells, depth + 1, computerType, !isMax));\n      }\n    }\n  } else {\n    best = 1000;\n\n    for (let i = 0; i < lengthCells; i++) {\n      const cell = cells[i];\n\n      if (cell === null) {\n        // Make a move\n        const nextCells = replace(cells, i, 1 - computerType);\n\n        // Call minimax recursively and choose the minimum value\n        best = Math.min(best, minimax(nextCells, depth + 1, computerType, !isMax));\n      }\n    }\n  }\n\n  return best;\n}\n\nexport const findBestMove = (cells, computerType) => {\n  let bestVal = -1000;\n  let bestMove = null;\n\n  const lengthCells = cells.length;\n\n  for (let i = 0; i < lengthCells; i++) {\n    const cell = cells[i];\n\n    if (cell === null) {\n      // Make a move\n      const nextCells = replace(cells, i, computerType);\n\n      // Compute evaluation function for this move. \n      const moveVal = minimax(nextCells, 0, computerType, false);\n\n      // If the value of the current move is more than the best value, then update best\n      if (moveVal > bestVal) {\n        bestVal = moveVal;\n        bestMove = i;\n      }\n    }\n  }\n\n  return bestMove;\n}","import React, { Component } from 'react';\nimport {\n  GAME_TYPES, PLAYER_TURNS,\n  checkGameState, getRandom, replace,\n  findBestMove, findRandomMove\n} from './common';\n\nconst THINKING_TIME = 500;\n\nexport const AppContext = React.createContext();\n\nexport default class AppProvider extends Component {\n  initState = {\n    gameType: GAME_TYPES.TWO_PLAYERS,\n    currentIcon: getRandom(0, 2),\n    playerTurn: getRandom(0, 2),\n    cells: new Array(9).fill(null),\n    gameState: {\n      position: \"\",\n      iconType: null,\n      isTie: null,\n    },\n  }\n\n  state = {\n    gameType: this.initState.gameType,\n    currentIcon: this.initState.currentIcon,\n    playerTurn: this.initState.playerTurn,\n    cells: this.initState.cells,\n    gameState: this.initState.gameState,\n\n    changeType: (type) => {\n      if (this.state.gameType !== type) {\n        this.initNewGame(type);\n      }\n    },\n    humanPlay: (index) => {\n      this.humanPlay(index)\n    },\n    newGame: () => {\n      this.initNewGame(this.state.gameType);\n    }\n  }\n\n  initGame = () => {\n    if (this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\n      this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\n\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      this.timeout = setTimeout(() => {\n        const randomMove = findRandomMove(this.state.cells);\n        this.computerPlay(randomMove);\n      }, THINKING_TIME);\n    }\n  }\n\n  initNewGame = (type = this.initState.gameType) => {\n    this.setState(() => {\n      return {\n        gameType: type,\n        currentIcon: getRandom(0, 2),\n        playerTurn: getRandom(0, 2),\n        cells: this.initState.cells,\n        gameState: this.initState.gameState,\n      }\n    }, () => {\n      this.initGame();\n    });\n  }\n\n  applyState = (prevState, index) => {\n    const cells = prevState.cells;\n    const nextIcon = 1 - prevState.currentIcon;\n    const nextPlayerTurn = 1 - prevState.playerTurn;\n    const nextCells = replace(cells, index, prevState.currentIcon);\n    const gameState = checkGameState(nextCells);\n\n    return {\n      gameState: gameState,\n      currentIcon: nextIcon,\n      playerTurn: nextPlayerTurn,\n      cells: nextCells\n    }\n  }\n\n  humanPlay = (index) => {\n    if (this.state.gameState.position === \"\" && this.state.cells[index] === null &&\n      (this.state.gameType === GAME_TYPES.TWO_PLAYERS || this.state.playerTurn === PLAYER_TURNS.HUMAN)) {\n\n      this.setState(prevState => {\n        return this.applyState(prevState, index);\n      }, () => {\n        // Make a move for computer if the game is in 'versus computer' mode\n        if (this.state.gameState.position === \"\" &&\n          this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\n          this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\n\n          setTimeout(() => {\n            this.makeAIMove();\n          }, THINKING_TIME);\n        }\n      });\n    }\n  }\n\n  computerPlay = (index) => {\n    if (this.state.gameState.position === \"\" && this.state.cells[index] === null &&\n      this.state.gameType === GAME_TYPES.VERSUS_COMPUTER &&\n      this.state.playerTurn === PLAYER_TURNS.COMPUTER) {\n\n      this.setState(prevState => this.applyState(prevState, index));\n    }\n  }\n\n  makeAIMove = () => {\n    const bestMove = findBestMove(this.state.cells, this.state.currentIcon);\n\n    if (bestMove !== null) {\n      this.computerPlay(bestMove);\n    }\n  }\n\n  componentDidMount() {\n    this.initGame();\n  }\n\n  render() {\n    return (\n      <AppContext.Provider value={this.state}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { AppContext } from '../AppProvider';\nimport { GAME_TYPES } from '../common';\n\nimport './Header.css';\n\nconst GameType = (props) => {\n    const { value, name } = props;\n\n    return (\n      <AppContext.Consumer>\n        {context => (\n          <li \n            onClick={() => context.changeType(value)} \n            className={value === context.gameType ? \"active\" : \"\"}> \n            {name} \n          </li>\n        )}\n      </AppContext.Consumer>\n    )\n  }\n\nclass Header extends Component {\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>Крестики-Нолики</h1>\n        <ul>\n          <GameType value={GAME_TYPES.TWO_PLAYERS} name=\"2 Игрока\" />\n          <GameType value={GAME_TYPES.VERSUS_COMPUTER} name=\"Против ИИ\" />\n        </ul>\n        <div>\n          <button onClick={() => this.context.newGame()}>Новая игра</button>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.contextType = AppContext;\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { AppContext } from '../AppProvider';\nimport { GAME_TYPES, PLAYER_TURNS, ICON_CHARS } from '../common';\nimport './Main.css';\n\nconst ICON_PLACE_HOLDDER = 'I';\n\nconst Cell = (props) => {\n  return (\n    <AppContext.Consumer>\n      {context => {\n        const value = context.cells[props.index];\n        const icon = value !== null ? ICON_CHARS[value] : ICON_PLACE_HOLDDER;\n        const isDoneClass = icon !== ICON_PLACE_HOLDDER ? 'done' : '';\n\n        return (\n          <button\n            className={`cell cell-${props.index} ${isDoneClass}`}\n            onClick={() => context.humanPlay(props.index)}>\n            {icon}\n          </button>\n        )\n      }}\n    </AppContext.Consumer>\n  )\n}\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.boardRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    if (this.context.gameState.position !== \"\") {\n      setTimeout(() => {\n        this.boardRef.current.classList.add('full');\n      }, 50);\n    } else {\n      this.boardRef.current.classList.remove('full');\n    }\n  }\n\n  render() {\n    return (\n      <div className={`board ${this.context.gameState.position}`} ref={this.boardRef}>\n        <div className=\"board-row\">\n          <Cell index={0} />\n          <Cell index={1} />\n          <Cell index={2} />\n        </div>\n\n        <div className=\"board-row\">\n          <Cell index={3} />\n          <Cell index={4} />\n          <Cell index={5} />\n        </div>\n\n        <div className=\"board-row\">\n          <Cell index={6} />\n          <Cell index={7} />\n          <Cell index={8} />\n        </div>\n      </div>\n    )\n  }\n}\nBoard.contextType = AppContext;\n\nclass Main extends Component {\n  render() {\n    let textInfo = '';\n    const currentIconType = this.context.currentIcon;\n\n    if (this.context.gameState.isTie) {\n      textInfo = 'Tie!';\n    } else {\n      if (this.context.gameType === GAME_TYPES.TWO_PLAYERS) {\n        if (this.context.gameState.position === \"\") {\n          textInfo = `Ход игрока(${ICON_CHARS[currentIconType]})`;\n        } else {\n          textInfo = `Игрок(${ICON_CHARS[1 - currentIconType]}) победил!`;\n        }\n      } else {\n        if (this.context.gameState.position === \"\") {\n          if (this.context.playerTurn === PLAYER_TURNS.HUMAN) textInfo = `Твой ход`;\n          else textInfo = `Ход ИИ`;\n        } else {\n          if (this.context.playerTurn === PLAYER_TURNS.HUMAN) textInfo = `ИИ победил!`;\n          else textInfo = `Ты победил!`;\n        }\n      }\n    }\n\n    return (\n      <main className=\"main\">\n        <div className=\"info\">{textInfo}</div>\n        <Board />\n      </main>\n    );\n  }\n}\nMain.contextType = AppContext;\n\nexport default Main;\n","import React, { Component } from 'react';\nimport AppProvider from './AppProvider';\nimport Header from './components/Header';\nimport Main from './components/Main';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <AppProvider>\n        <div className=\"app\">\n          <Header />\n          <Main />\n        </div>\n      </AppProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}